import { EmbedBuilder } from 'discord.js';
import type { PrefixCommand } from '../types/command.js';
import { getStore } from '../store/store.js';
import { readFileSync } from 'node:fs';
import path from 'node:path';

// v dungeon - Xem tr·∫°ng th√°i c√°c ·∫£i
export const prefixDungeon: PrefixCommand = {
  name: 'dungeon',
  description: 'Xem tr·∫°ng th√°i c√°c ·∫£i',
  async execute(message) {
    const store = getStore();
    const user = store.getUser(message.author.id);
    const gameConfig = JSON.parse(readFileSync(path.join(process.cwd(), 'data/game_config.json'), 'utf8'));
    
    const embed = new EmbedBuilder()
      .setTitle('üèØ Tam Gi·ªõi ·∫¢i ƒê·∫•u')
      .setColor('#1a237e')
      .setDescription('Ch·ªçn m·ªôt trong ba c√µi ƒë·ªÉ chinh ph·ª•c:')
      .addFields(
        {
          name: 'üåø Nh√¢n Gi·ªõi (Normal)',
          value: `Cooldown: 5 ph√∫t\nY√™u c·∫ßu: Kh√¥ng\nƒê·ªô kh√≥: Th·∫•p (70%)\nPh·∫ßn th∆∞·ªüng: Tr·ª©ng th·∫•p, Linh h·ªìn th·∫•p, V 50-150`,
          inline: true
        },
        {
          name: '‚ö° Thi√™n Gi·ªõi (Challenge)',
          value: `Cooldown: 15 ph√∫t\nY√™u c·∫ßu: 1 B√πa H·ªô M·ªánh\nƒê·ªô kh√≥: Trung b√¨nh (50%)\nPh·∫ßn th∆∞·ªüng: Tr·ª©ng trung, Linh h·ªìn trung, V 200-500`,
          inline: true
        },
        {
          name: 'üî• Ma Gi·ªõi (Insane)',
          value: `Cooldown: 30 ph√∫t\nY√™u c·∫ßu: 1 Linh ƒêan C·∫•p Cao + Level 5+\nƒê·ªô kh√≥: Cao (30%)\nPh·∫ßn th∆∞·ªüng: Tr·ª©ng cao, Linh h·ªìn cao, V 500-1500`,
          inline: true
        }
      )
      .setFooter({ text: 'S·ª≠ d·ª•ng: v dungeon enter <nhan|thien|ma>' })
      .setTimestamp();
    
    await message.reply({ embeds: [embed] });
  }
};

// v dungeon enter <tier> - V√†o ·∫£i
export const prefixDungeonEnter: PrefixCommand = {
  name: 'dungeon_enter',
  description: 'V√†o ·∫£i: v dungeon enter <nhan|thien|ma>',
  async execute(message, args) {
    const tier = args[0]?.toLowerCase();
    if (!tier || !['nhan', 'thien', 'ma'].includes(tier)) {
      await message.reply('C√∫ ph√°p: v dungeon enter <nhan|thien|ma>');
      return;
    }
    
    const store = getStore();
    const user = store.getUser(message.author.id);
    const gameConfig = JSON.parse(readFileSync(path.join(process.cwd(), 'data/game_config.json'), 'utf8'));
    
    // Ki·ªÉm tra cooldown
    const cooldownKey = `dungeon_${tier}`;
    const cooldownCheck = store.checkCooldown(message.author.id, cooldownKey as any);
    
    if (!cooldownCheck.canUse) {
      await message.reply(`‚è∞ B·∫°n c·∫ßn ch·ªù ${cooldownCheck.remainingMinutes} ph√∫t n·ªØa m·ªõi c√≥ th·ªÉ v√†o ${tier} gi·ªõi.`);
      return;
    }
    
    // L·∫•y config cho tier
    const tierConfig = gameConfig.dungeon_tiers[`${tier}_gioi`];
    if (!tierConfig) {
      await message.reply('C√µi kh√¥ng h·ª£p l·ªá.');
      return;
    }
    
    // Ki·ªÉm tra y√™u c·∫ßu
    if (tierConfig.requirements.includes('bua_ho_menh')) {
      if (!store.getItemQuantity(message.author.id, 'dungeonGear', 'bua_ho_menh')) {
        await message.reply('C·∫ßn 1 B√πa H·ªô M·ªánh ƒë·ªÉ v√†o Thi√™n Gi·ªõi. H√£y craft t·ª´ 5 Linh H·ªìn Th·∫•p.');
        return;
      }
    }
    
    if (tierConfig.requirements.includes('linh_dan_cao_cap')) {
      if (!store.getItemQuantity(message.author.id, 'dungeonGear', 'linh_dan_cao_cap')) {
        await message.reply('C·∫ßn 1 Linh ƒêan C·∫•p Cao ƒë·ªÉ v√†o Ma Gi·ªõi. H√£y craft t·ª´ 10 Linh H·ªìn Cao.');
        return;
      }
    }
    
    if (tierConfig.requirements.includes('level_5')) {
      if (user.level < 5) {
        await message.reply('C·∫ßn Level 5+ ƒë·ªÉ v√†o Ma Gi·ªõi.');
        return;
      }
    }
    
    // Th·ª±c hi·ªán v√†o ·∫£i
    const result = store.enterDungeon(message.author.id, tier);
    
    if (!result.success) {
      await message.reply(result.message);
      return;
    }
    
    // Set cooldown
    store.setCooldown(message.author.id, cooldownKey as any, tierConfig.cooldown);
    
    // C·ªông XP
    const xpResult = store.addXP(message.author.id, 20);
    store.save();
    
    const embed = new EmbedBuilder()
      .setTitle(`${tierConfig.emoji} ${tierConfig.name}`)
      .setColor(tier === 'nhan' ? '#4fc3f7' : tier === 'thien' ? '#ff6f00' : '#1a237e')
      .setDescription(result.message)
      .addFields(
        { name: 'üí∞ Ph·∫ßn th∆∞·ªüng', value: result.rewards || 'Kh√¥ng c√≥', inline: true },
        { name: '‚è∞ Cooldown', value: `${tierConfig.cooldown} ph√∫t`, inline: true },
        { name: 'üìà XP', value: xpResult.message, inline: true }
      )
      .setTimestamp();
    
    await message.reply({ embeds: [embed] });
  }
};

// v dungeon stats - Th·ªëng k√™ c√° nh√¢n
export const prefixDungeonStats: PrefixCommand = {
  name: 'dungeon_stats',
  description: 'Th·ªëng k√™ c√° nh√¢n',
  async execute(message) {
    const store = getStore();
    const user = store.getUser(message.author.id);
    
    const embed = new EmbedBuilder()
      .setTitle('üìä Th·ªëng K√™ ·∫¢i ƒê·∫•u')
      .setColor('#1a237e')
      .addFields(
        { name: 'üèÜ T·ªïng l·∫ßn chinh ph·ª•c', value: `${user.dungeonStats?.totalClears || 0}`, inline: true },
        { name: '‚úÖ T·ª∑ l·ªá th√†nh c√¥ng', value: `${user.dungeonStats?.successRate || 0}%`, inline: true },
        { name: 'üí∞ T·ªïng V ki·∫øm ƒë∆∞·ª£c', value: `${user.dungeonStats?.totalEarned || 0} V`, inline: true },
        { name: 'üêâ Tr·ª©ng thu th·∫≠p', value: `${user.dungeonStats?.eggsCollected || 0}`, inline: true },
        { name: 'üëª Linh h·ªìn thu th·∫≠p', value: `${user.dungeonStats?.soulsCollected || 0}`, inline: true },
        { name: 'üíé Ng·ªçc linh thu th·∫≠p', value: `${user.dungeonStats?.ngocLinhCollected || 0}`, inline: true }
      )
      .setTimestamp();
    
    await message.reply({ embeds: [embed] });
  }
};

// v dungeon leaderboard - BXH
export const prefixDungeonLeaderboard: PrefixCommand = {
  name: 'dungeon_leaderboard',
  description: 'B·∫£ng x·∫øp h·∫°ng chinh ph·ª•c ·∫£i',
  async execute(message) {
    const store = getStore();
    const users = Object.values((store as any).db.users) as any[];
    
    const leaderboard = users
      .filter(u => u.dungeonStats?.totalClears > 0)
      .sort((a, b) => (b.dungeonStats?.totalClears || 0) - (a.dungeonStats?.totalClears || 0))
      .slice(0, 10);
    
    const lines = leaderboard.map((u, i) => 
      `${i + 1}. <@${u.userId}> - ${u.dungeonStats?.totalClears || 0} l·∫ßn chinh ph·ª•c`
    );
    
    const embed = new EmbedBuilder()
      .setTitle('üèÜ B·∫£ng X·∫øp H·∫°ng ·∫¢i ƒê·∫•u')
      .setColor('#ff6f00')
      .setDescription(lines.join('\n') || 'Ch∆∞a c√≥ ai chinh ph·ª•c ·∫£i n√†o.')
      .setTimestamp();
    
    await message.reply({ embeds: [embed] });
  }
};

// Main dungeon command handler
export const prefixDungeonMain: PrefixCommand = {
  name: 'dungeon',
  description: 'Qu·∫£n l√Ω ·∫£i ƒë·∫•u: dungeon/enter/stats/leaderboard',
  async execute(message, args) {
    const subcommand = args[0]?.toLowerCase();
    
    if (subcommand === 'enter') {
      await prefixDungeonEnter.execute(message, args.slice(1));
    } else if (subcommand === 'stats') {
      await prefixDungeonStats.execute(message, []);
    } else if (subcommand === 'leaderboard') {
      await prefixDungeonLeaderboard.execute(message, []);
    } else {
      // Default: show dungeon status
      await prefixDungeon.execute(message, []);
    }
  }
};

export const prefixes: PrefixCommand[] = [prefixDungeonMain];
